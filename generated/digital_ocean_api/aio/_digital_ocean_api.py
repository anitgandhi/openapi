# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/python@5.14.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from copy import deepcopy
from typing import Any, Awaitable, Optional, Union

from msrest import Deserializer, Serializer

from azure.core import AsyncPipelineClient
from azure.core.rest import AsyncHttpResponse, HttpRequest

from .. import models
from ._configuration import DigitalOceanAPIConfiguration
from .operations import AddOperations, AssignOperations, CreateOperations, DeleteOperations, DestroyOperations, DigitalOceanAPIOperationsMixin, GetOperations, InstallOperations, ListOperations, PatchOperations, PostOperations, PurgeOperations, RecycleOperations, RemoveOperations, ResetOperations, RetryOperations, RunOperations, TagOperations, UntagOperations, UpdateOperations, UpgradeOperations, ValidateOperations

class DigitalOceanAPI(DigitalOceanAPIOperationsMixin):    # pylint: disable=too-many-instance-attributes
    """Introduction
    ============

    The DigitalOcean API allows you to manage Droplets and resources within the
    DigitalOcean cloud in a simple, programmatic way using conventional HTTP requests.

    All of the functionality that you are familiar with in the DigitalOcean
    control panel is also available through the API, allowing you to script the
    complex actions that your situation requires.

    The API documentation will start with a general overview about the design
    and technology that has been implemented, followed by reference information
    about specific endpoints.

    Requests
    --------

    Any tool that is fluent in HTTP can communicate with the API simply by
    requesting the correct URI. Requests should be made using the HTTPS protocol
    so that traffic is encrypted. The interface responds to different methods
    depending on the action required.

    .. list-table::
       :header-rows: 1

       * - Method
         - Usage
       * - GET
         - For simple retrieval of information about your account, Droplets, or environment, you
    should use the GET method.  The information you request will be returned to you as a JSON
    object. The attributes defined by the JSON object can be used to form additional requests.  Any
    request using the GET method is read-only and will not affect any of the objects you are
    querying.
       * - DELETE
         - To destroy a resource and remove it from your account and environment, the DELETE method
    should be used.  This will remove the specified object if it is found.  If it is not found, the
    operation will return a response indicating that the object was not found. This idempotency
    means that you do not have to check for a resource's availability prior to issuing a delete
    command, the final state will be the same regardless of its existence.
       * - PUT
         - To update the information about a resource in your account, the PUT method is available.
    Like the DELETE Method, the PUT method is idempotent.  It sets the state of the target using
    the provided values, regardless of their current values. Requests using the PUT method do not
    need to check the current attributes of the object.
       * - PATCH
         - Some resources support partial modification. In these cases, the PATCH method is
    available. Unlike PUT which generally requires a complete representation of a resource, a PATCH
    request is is a set of instructions on how to modify a resource updating only specific
    attributes.
       * - POST
         - To create a new object, your request should specify the POST method. The POST request
    includes all of the attributes necessary to create a new object.  When you wish to create a new
    object, send a POST request to the target endpoint.
       * - HEAD
         - Finally, to retrieve metadata information, you should use the HEAD method to get the
    headers.  This returns only the header of what would be returned with an associated GET
    request. Response headers contain some useful information about your API access and the results
    that are available for your request. For instance, the headers contain your current rate-limit
    value and the amount of time available until the limit resets. It also contains metrics about
    the total number of objects found, pagination information, and the total content length.


    HTTP Statuses
    -------------

    Along with the HTTP methods that the API responds to, it will also return
    standard HTTP statuses, including error codes.

    In the event of a problem, the status will contain the error code, while the
    body of the response will usually contain additional information about the
    problem that was encountered.

    In general, if the status returned is in the 200 range, it indicates that
    the request was fulfilled successfully and that no error was encountered.

    Return codes in the 400 range typically indicate that there was an issue
    with the request that was sent. Among other things, this could mean that you
    did not authenticate correctly, that you are requesting an action that you
    do not have authorization for, that the object you are requesting does not
    exist, or that your request is malformed.

    If you receive a status in the 500 range, this generally indicates a
    server-side problem. This means that we are having an issue on our end and
    cannot fulfill your request currently.

    400 and 500 level error responses will include a JSON object in their body,
    including the following attributes:

    .. list-table::
       :header-rows: 1

       * - Name
         - Type
         - Description
       * - id
         - string
         - A short identifier corresponding to the HTTP status code returned. For example, the ID
    for a response returning a 404 status code would be "not_found."
       * - message
         - string
         - A message providing additional information about the error, including details to help
    resolve it when possible.
       * - request_id
         - string
         - Optionally, some endpoints may include a request ID that should be provided when
    reporting bugs or opening support tickets to help identify the issue.


    Example Error Response
    ^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

           HTTP/1.1 403 Forbidden
           {
             "id":       "forbidden",
             "message":  "You do not have access for the attempted action."
           }

    Responses
    ---------

    When a request is successful, a response body will typically be sent back in
    the form of a JSON object. An exception to this is when a DELETE request is
    processed, which will result in a successful HTTP 204 status and an empty
    response body.

    Inside of this JSON object, the resource root that was the target of the
    request will be set as the key. This will be the singular form of the word
    if the request operated on a single object, and the plural form of the word
    if a collection was processed.

    For example, if you send a GET request to ``/v2/droplets/$DROPLET_ID`` you
    will get back an object with a key called "\ ``droplet``\ ". However, if you send
    the GET request to the general collection at ``/v2/droplets``\ , you will get
    back an object with a key called "\ ``droplets``\ ".

    The value of these keys will generally be a JSON object for a request on a
    single object and an array of objects for a request on a collection of
    objects.

    Response for a Single Object
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

           {
               "droplet": {
                   "name": "example.com"
                   . . .
               }
           }

    Response for an Object Collection
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

           {
               "droplets": [
                   {
                       "name": "example.com"
                       . . .
                   },
                   {
                       "name": "second.com"
                       . . .
                   }
               ]
           }

    Meta
    ----

    In addition to the main resource root, the response may also contain a
    ``meta`` object. This object contains information about the response itself.

    The ``meta`` object contains a ``total`` key that is set to the total number of
    objects returned by the request. This has implications on the ``links`` object
    and pagination.

    The ``meta`` object will only be displayed when it has a value. Currently, the
    ``meta`` object will have a value when a request is made on a collection (like
    ``droplets`` or ``domains``\ ).

    Sample Meta Object
    ^^^^^^^^^^^^^^^^^^

    .. code-block::

           {
               . . .
               "meta": {
                   "total": 43
               }
               . . .
           }

    Links & Pagination
    ------------------

    The ``links`` object is returned as part of the response body when pagination
    is enabled. By default, 20 objects are returned per page. If the response
    contains 20 objects or fewer, no ``links`` object will be returned. If the
    response contains more than 20 objects, the first 20 will be returned along
    with the ``links`` object.

    You can request a different pagination limit or force pagination by
    appending ``?per_page=`` to the request with the number of items you would
    like per page. For instance, to show only two results per page, you could
    add ``?per_page=2`` to the end of your query. The maximum number of results
    per page is 200.

    The ``links`` object contains a ``pages`` object. The ``pages`` object, in turn,
    contains keys indicating the relationship of additional pages. The values of
    these are the URLs of the associated pages. The keys will be one of the
    following:


    * **first**\ : The URI of the first page of results.
    * **prev**\ : The URI of the previous sequential page of results.
    * **next**\ : The URI of the next sequential page of results.
    * **last**\ : The URI of the last page of results.

    The ``pages`` object will only include the links that make sense. So for the
    first page of results, no ``first`` or ``prev`` links will ever be set. This
    convention holds true in other situations where a link would not make sense.

    Sample Links Object
    ^^^^^^^^^^^^^^^^^^^

    .. code-block::

           {
               . . .
               "links": {
                   "pages": {
                       "last": "https://api.digitalocean.com/v2/images?page=2",
                       "next": "https://api.digitalocean.com/v2/images?page=2"
                   }
               }
               . . .
           }

    Rate Limit
    ----------

    Requests through the API are rate limited per OAuth token. Current rate limits:


    * 5,000 requests per hour
    * 250 requests per minute (5% of the hourly total)

    Once you exceed either limit, you will be rate limited until the next cycle
    starts. Space out any requests that you would otherwise issue in bursts for
    the best results.

    The rate limiting information is contained within the response headers of
    each request. The relevant headers are:


    * **RateLimit-Limit**\ : The number of requests that can be made per hour.
    * **RateLimit-Remaining**\ : The number of requests that remain before you hit your request
    limit. See the information below for how the request limits expire.
    * **RateLimit-Reset**\ : This represents the time when the oldest request will expire. The
    value is given in `Unix epoch time <http://en.wikipedia.org/wiki/Unix_time>`_. See below for
    more information about how request limits expire.

    As long as the ``RateLimit-Remaining`` count is above zero, you will be able
    to make additional requests.

    The way that a request expires and is removed from the current limit count
    is important to understand. Rather than counting all of the requests for an
    hour and resetting the ``RateLimit-Remaining`` value at the end of the hour,
    each request instead has its own timer.

    This means that each request contributes toward the ``RateLimit-Remaining``
    count for one complete hour after the request is made. When that request's
    timer runs out, it is no longer counted towards the request limit.

    This has implications on the meaning of the ``RateLimit-Reset`` header as
    well. Because the entire rate limit is not reset at one time, the value of
    this header is set to the time when the *oldest* request will expire.

    Keep this in mind if you see your ``RateLimit-Reset`` value change, but not
    move an entire hour into the future.

    If the ``RateLimit-Remaining`` reaches zero, subsequent requests will receive
    a 429 error code until the request reset has been reached. You can see the
    format of the response in the examples.

    **Note:** The following endpoints have special rate limit requirements that
    are independent of the limits defined above.


    * Only 12 ``POST`` requests to the ``/v2/floating_ips`` endpoint to create Floating IPs can be
    made per 60 seconds.
    * Only 10 ``GET`` requests to the ``/v2/account/keys`` endpoint to list SSH keys can be made
    per 60 seconds.

    Sample Rate Limit Headers
    ^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

           . . .
           RateLimit-Limit: 1200
           RateLimit-Remaining: 1193
           RateLimit-Reset: 1402425459
           . . .

    Sample Rate Exceeded Response
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

           429 Too Many Requests
           {
                   id: "too_many_requests",
                   message: "API Rate limit exceeded."
           }

    Curl Examples
    -------------

    Throughout this document, some example API requests will be given using the
    ``curl`` command. This will allow us to demonstrate the various endpoints in a
    simple, textual format.

      These examples assume that you are using a Linux or macOS command line. To run
    these commands on a Windows machine, you can either use cmd.exe, PowerShell, or WSL:


    *
      For cmd.exe, use the ``set VAR=VALUE`` `syntax
    <https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/set_1>`_
      to define environment variables, call them with ``%VAR%``\ , then replace all backslashes (\
    ``\``\ ) in the examples with carets (\ ``^``\ ).

    *
      For PowerShell, use the ``$Env:VAR = "VALUE"`` `syntax
    <https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_environment_variables?view=powershell-7.2>`_
      to define environment variables, call them with ``$Env:VAR``\ , then replace ``curl`` with
    ``curl.exe`` and all backslashes (\ ``\``\ ) in the examples with backticks (\ ``` ``\ ).

    *
      WSL is a compatibility layer that allows you to emulate a Linux terminal on a Windows
    machine.
      Install WSL with our `community tutorial
    <https://www.digitalocean.com/community/tutorials/how-to-install-the-windows-subsystem-for-linux-2-on-microsoft-windows-10>`_\
    ,
      then follow this API documentation normally.

    The names of account-specific references (like Droplet IDs, for instance)
    will be represented by variables. For instance, a Droplet ID may be
    represented by a variable called ``$DROPLET_ID``. You can set the associated
    variables in your environment if you wish to use the examples without
    modification.

    The first variable that you should set to get started is your OAuth
    authorization token. The next section will go over the details of this, but
    you can set an environmental variable for it now.

    Generate a token by going to the `Apps & API
    <https://cloud.digitalocean.com/settings/applications>`_
    section of the DigitalOcean control panel. Use an existing token if you have
    saved one, or generate a new token with the "Generate new token" button.
    Copy the generated token and use it to set and export the TOKEN variable in
    your environment as the example shows.

    You may also wish to set some other variables now or as you go along. For
    example, you may wish to set the ``DROPLET_ID`` variable to one of your
    Droplet IDs since this will be used frequently in the API.

    If you are following along, make sure you use a Droplet ID that you control
    so that your commands will execute correctly.

    If you need access to the headers of a response through ``curl``\ , you can pass
    the ``-i`` flag to display the header information along with the body. If you
    are only interested in the header, you can instead pass the ``-I`` flag, which
    will exclude the response body entirely.

    Set and Export your OAuth Token
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

       export DIGITALOCEAN_TOKEN=your_token_here

    Set and Export a Variable
    ^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

       export DROPLET_ID=1111111

    Parameters
    ----------

    There are two different ways to pass parameters in a request with the API.

    When passing parameters to create or update an object, parameters should be
    passed as a JSON object containing the appropriate attribute names and
    values as key-value pairs. When you use this format, you should specify that
    you are sending a JSON object in the header. This is done by setting the
    ``Content-Type`` header to ``application/json``. This ensures that your request
    is interpreted correctly.

    When passing parameters to filter a response on GET requests, parameters can
    be passed using standard query attributes. In this case, the parameters
    would be embedded into the URI itself by appending a ``?`` to the end of the
    URI and then setting each attribute with an equal sign. Attributes can be
    separated with a ``&``. Tools like ``curl`` can create the appropriate URI when
    given parameters and values; this can also be done using the ``-F`` flag and
    then passing the key and value as an argument. The argument should take the
    form of a quoted string with the attribute being set to a value with an
    equal sign.

    Pass Parameters as a JSON Object
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

           curl -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
               -H "Content-Type: application/json" \
               -d '{"name": "example.com", "ip_address": "127.0.0.1"}' \
               -X POST "https://api.digitalocean.com/v2/domains"

    Pass Filter Parameters as a Query String
    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    .. code-block::

            curl -H "Authorization: Bearer $DIGITALOCEAN_TOKEN" \
                -X GET \
                "https://api.digitalocean.com/v2/images?private=true"

    Cross Origin Resource Sharing
    -----------------------------

    In order to make requests to the API from other domains, the API implements
    Cross Origin Resource Sharing (CORS) support.

    CORS support is generally used to create AJAX requests outside of the domain
    that the request originated from. This is necessary to implement projects
    like control panels utilizing the API. This tells the browser that it can
    send requests to an outside domain.

    The procedure that the browser initiates in order to perform these actions
    (other than GET requests) begins by sending a "preflight" request. This sets
    the ``Origin`` header and uses the ``OPTIONS`` method. The server will reply
    back with the methods it allows and some of the limits it imposes. The
    client then sends the actual request if it falls within the allowed
    constraints.

    This process is usually done in the background by the browser, but you can
    use curl to emulate this process using the example provided. The headers
    that will be set to show the constraints are:


    * **Access-Control-Allow-Origin**\ : This is the domain that is sent by the client or browser
    as the origin of the request. It is set through an ``Origin`` header.
    * **Access-Control-Allow-Methods**\ : This specifies the allowed options for requests from that
    domain. This will generally be all available methods.
    * **Access-Control-Expose-Headers**\ : This will contain the headers that will be available to
    requests from the origin domain.
    * **Access-Control-Max-Age**\ : This is the length of time that the access is considered valid.
    After this expires, a new preflight should be sent.
    * **Access-Control-Allow-Credentials**\ : This will be set to ``true``. It basically allows you
    to send your OAuth token for authentication.

    You should not need to be concerned with the details of these headers,
    because the browser will typically do all of the work for you.

    :ivar install: InstallOperations operations
    :vartype install: digital_ocean_api.aio.operations.InstallOperations
    :ivar get: GetOperations operations
    :vartype get: digital_ocean_api.aio.operations.GetOperations
    :ivar list: ListOperations operations
    :vartype list: digital_ocean_api.aio.operations.ListOperations
    :ivar create: CreateOperations operations
    :vartype create: digital_ocean_api.aio.operations.CreateOperations
    :ivar update: UpdateOperations operations
    :vartype update: digital_ocean_api.aio.operations.UpdateOperations
    :ivar destroy: DestroyOperations operations
    :vartype destroy: digital_ocean_api.aio.operations.DestroyOperations
    :ivar delete: DeleteOperations operations
    :vartype delete: digital_ocean_api.aio.operations.DeleteOperations
    :ivar post: PostOperations operations
    :vartype post: digital_ocean_api.aio.operations.PostOperations
    :ivar validate: ValidateOperations operations
    :vartype validate: digital_ocean_api.aio.operations.ValidateOperations
    :ivar assign: AssignOperations operations
    :vartype assign: digital_ocean_api.aio.operations.AssignOperations
    :ivar purge: PurgeOperations operations
    :vartype purge: digital_ocean_api.aio.operations.PurgeOperations
    :ivar patch: PatchOperations operations
    :vartype patch: digital_ocean_api.aio.operations.PatchOperations
    :ivar add: AddOperations operations
    :vartype add: digital_ocean_api.aio.operations.AddOperations
    :ivar reset: ResetOperations operations
    :vartype reset: digital_ocean_api.aio.operations.ResetOperations
    :ivar retry: RetryOperations operations
    :vartype retry: digital_ocean_api.aio.operations.RetryOperations
    :ivar upgrade: UpgradeOperations operations
    :vartype upgrade: digital_ocean_api.aio.operations.UpgradeOperations
    :ivar recycle: RecycleOperations operations
    :vartype recycle: digital_ocean_api.aio.operations.RecycleOperations
    :ivar run: RunOperations operations
    :vartype run: digital_ocean_api.aio.operations.RunOperations
    :ivar remove: RemoveOperations operations
    :vartype remove: digital_ocean_api.aio.operations.RemoveOperations
    :ivar tag: TagOperations operations
    :vartype tag: digital_ocean_api.aio.operations.TagOperations
    :ivar untag: UntagOperations operations
    :vartype untag: digital_ocean_api.aio.operations.UntagOperations
    :param ssh_key_identifier: Either the ID or the fingerprint of an existing SSH key.
    :type ssh_key_identifier: any
    :param action_id: A unique numeric ID that can be used to identify and reference an action.
    :type action_id: int
    :param id: The ID of the app.
    :type id: str
    :param app_id: The app ID.
    :type app_id: str
    :param deployment_id: The deployment ID.
    :type deployment_id: str
    :param component_name: An optional component name. If set, logs will be limited to this
     component only.
    :type component_name: str
    :param slug: The slug of the tier.
    :type slug: str
    :param alert_id: The alert ID.
    :type alert_id: str
    :param cdn_id: A unique identifier for a CDN endpoint.
    :type cdn_id: str
    :param certificate_id: A unique identifier for a certificate.
    :type certificate_id: str
    :param invoice_uuid: UUID of the invoice.
    :type invoice_uuid: str
    :param database_cluster_uuid: A unique identifier for a database cluster.
    :type database_cluster_uuid: str
    :param migration_id: A unique identifier assigned to the online migration.
    :type migration_id: str
    :param replica_name: The name of the database replica.
    :type replica_name: str
    :param username: The name of the database user.
    :type username: str
    :param database_name: The name of the database.
    :type database_name: str
    :param pool_name: The name used to identify the connection pool.
    :type pool_name: str
    :param domain_name: The name of the domain itself.
    :type domain_name: str
    :param domain_record_id: The unique identifier of the domain record.
    :type domain_record_id: int
    :param droplet_id: A unique identifier for a Droplet instance.
    :type droplet_id: int
    :param x_dangerous: Acknowledge this action will destroy the Droplet and all associated
     resources and *can not* be reversed.
    :type x_dangerous: bool
    :param firewall_id: A unique ID that can be used to identify and reference a firewall.
    :type firewall_id: str
    :param floating_ip: A floating IP address.
    :type floating_ip: str
    :param image_id: A unique number that can be used to identify and reference a specific image.
    :type image_id: int
    :param cluster_id: A unique ID that can be used to reference a Kubernetes cluster.
    :type cluster_id: str
    :param node_pool_id: A unique ID that can be used to reference a Kubernetes node pool.
    :type node_pool_id: str
    :param node_id: A unique ID that can be used to reference a node in a Kubernetes node pool.
    :type node_id: str
    :param lb_id: A unique identifier for a load balancer.
    :type lb_id: str
    :param alert_uuid: A unique identifier for an alert policy.
    :type alert_uuid: str
    :param host_id: The droplet ID.
    :type host_id: str
    :param interface: The network interface.
    :type interface: str or ~digital_ocean_api.models.Enum69
    :param direction: The traffic direction.
    :type direction: str or ~digital_ocean_api.models.Enum70
    :param start: Timestamp to start metric window.
    :type start: str
    :param end: Timestamp to end metric window.
    :type end: str
    :param project_id: A unique identifier for a project.
    :type project_id: str
    :param registry_name: The name of a container registry.
    :type registry_name: str
    :param repository_name: The name of a container registry repository. If the name contains ``/``
     characters, they must be URL-encoded, e.g. ``%2F``.
    :type repository_name: str
    :param repository_tag: The name of a container registry repository tag.
    :type repository_tag: str
    :param manifest_digest: The manifest digest of a container registry repository tag.
    :type manifest_digest: str
    :param garbage_collection_uuid: The UUID of a garbage collection run.
    :type garbage_collection_uuid: str
    :param snapshot_id: Either the ID of an existing snapshot. This will be an integer for a
     Droplet snapshot or a string for a volume snapshot.
    :type snapshot_id: any
    :param tag_id: The name of the tag. Tags may contain letters, numbers, colons, dashes, and
     underscores. There is a limit of 255 characters per tag.
    :type tag_id: str
    :param volume_id: The ID of the block storage volume.
    :type volume_id: str
    :param vpc_id: A unique identifier for a VPC.
    :type vpc_id: str
    :param type: Restrict results to a certain type of 1-Click. Default value is None.
    :type type: str or ~digital_ocean_api.models.Enum0
    :param per_page: Number of items returned per page. Default value is 20.
    :type per_page: int
    :param page: Which 'page' of paginated results to return. Default value is 1.
    :type page: int
    :param name: The name of the app to retrieve. Default value is None.
    :type name: str
    :param follow: Whether the logs should follow live updates. Default value is None.
    :type follow: bool
    :param pod_connection_timeout: An optional time duration to wait if the underlying component
     instance is not immediately available. Default: ``3m``. Default value is None.
    :type pod_connection_timeout: str
    :param tag_name: Limits the results to database clusters with a specific tag. Default value is
     None.
    :type tag_name: str
    :param private: Used to filter only user images. Default value is None.
    :type private: bool
    :param expiry_seconds: The duration in seconds that the returned Kubernetes credentials will be
     valid. If not set or 0, the credentials will have a 7 day expiry. Default value is 0.
    :type expiry_seconds: int
    :param skip_drain: Specifies whether or not to drain workloads from a node before it is
     deleted. Setting it to ``1`` causes node draining to be skipped. Omitting the query parameter
     or setting its value to ``0`` carries out draining prior to deletion. Default value is 0.
    :type skip_drain: int
    :param replace: Specifies whether or not to replace a node after it has been deleted. Setting
     it to ``1`` causes the node to be replaced by a new one after deletion. Omitting the query
     parameter or setting its value to ``0`` deletes without replacement. Default value is 0.
    :type replace: int
    :param run_id: Specifies the clusterlint run whose results will be retrieved. Default value is
     None.
    :type run_id: str
    :param read_write: By default, the registry credentials allow for read-only access. Set this
     query parameter to ``true`` to obtain read-write credentials. Default value is False.
    :type read_write: bool
    :param page_token: Token to retrieve of the next or previous set of results more quickly than
     using 'page'. Default value is None.
    :type page_token: str
    :param resource_type: Used to filter snapshots by a resource type. Default value is None.
    :type resource_type: str or ~digital_ocean_api.models.Enum79
    :param region: The slug identifier for the region where the resource is available. Default
     value is None.
    :type region: str or ~digital_ocean_api.models.RegionSlug
    :param base_url: Service URL. Default value is "https://api.digitalocean.com".
    :type base_url: str
    """

    def __init__(
        self,
        ssh_key_identifier: Any,
        action_id: int,
        id: str,
        app_id: str,
        deployment_id: str,
        component_name: str,
        slug: str,
        alert_id: str,
        cdn_id: str,
        certificate_id: str,
        invoice_uuid: str,
        database_cluster_uuid: str,
        migration_id: str,
        replica_name: str,
        username: str,
        database_name: str,
        pool_name: str,
        domain_name: str,
        domain_record_id: int,
        droplet_id: int,
        x_dangerous: bool,
        firewall_id: str,
        floating_ip: str,
        image_id: int,
        cluster_id: str,
        node_pool_id: str,
        node_id: str,
        lb_id: str,
        alert_uuid: str,
        host_id: str,
        interface: Union[str, "_models.Enum69"],
        direction: Union[str, "_models.Enum70"],
        start: str,
        end: str,
        project_id: str,
        registry_name: str,
        repository_name: str,
        repository_tag: str,
        manifest_digest: str,
        garbage_collection_uuid: str,
        snapshot_id: Any,
        tag_id: str,
        volume_id: str,
        vpc_id: str,
        type: Optional[Union[str, "_models.Enum0"]] = None,
        per_page: Optional[int] = 20,
        page: Optional[int] = 1,
        name: Optional[str] = None,
        follow: Optional[bool] = None,
        pod_connection_timeout: Optional[str] = None,
        tag_name: Optional[str] = None,
        private: Optional[bool] = None,
        expiry_seconds: Optional[int] = 0,
        skip_drain: Optional[int] = 0,
        replace: Optional[int] = 0,
        run_id: Optional[str] = None,
        read_write: Optional[bool] = False,
        page_token: Optional[str] = None,
        resource_type: Optional[Union[str, "_models.Enum79"]] = None,
        region: Optional[Union[str, "_models.RegionSlug"]] = None,
        base_url: str = "https://api.digitalocean.com",
        **kwargs: Any
    ) -> None:
        self._config = DigitalOceanAPIConfiguration(ssh_key_identifier=ssh_key_identifier, action_id=action_id, id=id, app_id=app_id, deployment_id=deployment_id, component_name=component_name, slug=slug, alert_id=alert_id, cdn_id=cdn_id, certificate_id=certificate_id, invoice_uuid=invoice_uuid, database_cluster_uuid=database_cluster_uuid, migration_id=migration_id, replica_name=replica_name, username=username, database_name=database_name, pool_name=pool_name, domain_name=domain_name, domain_record_id=domain_record_id, droplet_id=droplet_id, x_dangerous=x_dangerous, firewall_id=firewall_id, floating_ip=floating_ip, image_id=image_id, cluster_id=cluster_id, node_pool_id=node_pool_id, node_id=node_id, lb_id=lb_id, alert_uuid=alert_uuid, host_id=host_id, interface=interface, direction=direction, start=start, end=end, project_id=project_id, registry_name=registry_name, repository_name=repository_name, repository_tag=repository_tag, manifest_digest=manifest_digest, garbage_collection_uuid=garbage_collection_uuid, snapshot_id=snapshot_id, tag_id=tag_id, volume_id=volume_id, vpc_id=vpc_id, type=type, per_page=per_page, page=page, name=name, follow=follow, pod_connection_timeout=pod_connection_timeout, tag_name=tag_name, private=private, expiry_seconds=expiry_seconds, skip_drain=skip_drain, replace=replace, run_id=run_id, read_write=read_write, page_token=page_token, resource_type=resource_type, region=region, **kwargs)
        self._client = AsyncPipelineClient(base_url=base_url, config=self._config, **kwargs)

        client_models = {k: v for k, v in models.__dict__.items() if isinstance(v, type)}
        self._serialize = Serializer(client_models)
        self._deserialize = Deserializer(client_models)
        self._serialize.client_side_validation = False
        self.install = InstallOperations(self._client, self._config, self._serialize, self._deserialize)
        self.get = GetOperations(self._client, self._config, self._serialize, self._deserialize)
        self.list = ListOperations(self._client, self._config, self._serialize, self._deserialize)
        self.create = CreateOperations(self._client, self._config, self._serialize, self._deserialize)
        self.update = UpdateOperations(self._client, self._config, self._serialize, self._deserialize)
        self.destroy = DestroyOperations(self._client, self._config, self._serialize, self._deserialize)
        self.delete = DeleteOperations(self._client, self._config, self._serialize, self._deserialize)
        self.post = PostOperations(self._client, self._config, self._serialize, self._deserialize)
        self.validate = ValidateOperations(self._client, self._config, self._serialize, self._deserialize)
        self.assign = AssignOperations(self._client, self._config, self._serialize, self._deserialize)
        self.purge = PurgeOperations(self._client, self._config, self._serialize, self._deserialize)
        self.patch = PatchOperations(self._client, self._config, self._serialize, self._deserialize)
        self.add = AddOperations(self._client, self._config, self._serialize, self._deserialize)
        self.reset = ResetOperations(self._client, self._config, self._serialize, self._deserialize)
        self.retry = RetryOperations(self._client, self._config, self._serialize, self._deserialize)
        self.upgrade = UpgradeOperations(self._client, self._config, self._serialize, self._deserialize)
        self.recycle = RecycleOperations(self._client, self._config, self._serialize, self._deserialize)
        self.run = RunOperations(self._client, self._config, self._serialize, self._deserialize)
        self.remove = RemoveOperations(self._client, self._config, self._serialize, self._deserialize)
        self.tag = TagOperations(self._client, self._config, self._serialize, self._deserialize)
        self.untag = UntagOperations(self._client, self._config, self._serialize, self._deserialize)


    def _send_request(
        self,
        request: HttpRequest,
        **kwargs: Any
    ) -> Awaitable[AsyncHttpResponse]:
        """Runs the network request through the client's chained policies.

        >>> from azure.core.rest import HttpRequest
        >>> request = HttpRequest("GET", "https://www.example.org/")
        <HttpRequest [GET], url: 'https://www.example.org/'>
        >>> response = await client._send_request(request)
        <AsyncHttpResponse: 200 OK>

        For more information on this code flow, see https://aka.ms/azsdk/python/protocol/quickstart

        :param request: The network request you want to make. Required.
        :type request: ~azure.core.rest.HttpRequest
        :keyword bool stream: Whether the response payload will be streamed. Defaults to False.
        :return: The response of your network call. Does not do error handling on your response.
        :rtype: ~azure.core.rest.AsyncHttpResponse
        """

        request_copy = deepcopy(request)
        request_copy.url = self._client.format_url(request_copy.url)
        return self._client.send_request(request_copy, **kwargs)

    async def close(self) -> None:
        await self._client.close()

    async def __aenter__(self) -> "DigitalOceanAPI":
        await self._client.__aenter__()
        return self

    async def __aexit__(self, *exc_details) -> None:
        await self._client.__aexit__(*exc_details)
