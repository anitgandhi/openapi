# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.8.3, generator: @autorest/python@5.16.0)
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# --------------------------------------------------------------------------

from enum import Enum
from azure.core import CaseInsensitiveEnumMeta


class AccountStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """This value is one of "active", "warning" or "locked".
    """

    ACTIVE = "active"
    WARNING = "warning"
    LOCKED = "locked"

class ActionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The current status of the action. This can be "in-progress", "completed", or "errored".
    """

    IN_PROGRESS = "in-progress"
    COMPLETED = "completed"
    ERRORED = "errored"

class AlertPolicyCompare(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    GREATER_THAN = "GreaterThan"
    LESS_THAN = "LessThan"

class AlertPolicyRequestCompare(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    GREATER_THAN = "GreaterThan"
    LESS_THAN = "LessThan"

class AlertPolicyRequestType(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    V1_INSIGHTS_DROPLET_LOAD1 = "v1/insights/droplet/load_1"
    V1_INSIGHTS_DROPLET_LOAD5 = "v1/insights/droplet/load_5"
    V1_INSIGHTS_DROPLET_LOAD15 = "v1/insights/droplet/load_15"
    V1_INSIGHTS_DROPLET_MEMORY_UTILIZATION_PERCENT = "v1/insights/droplet/memory_utilization_percent"
    V1_INSIGHTS_DROPLET_DISK_UTILIZATION_PERCENT = "v1/insights/droplet/disk_utilization_percent"
    V1_INSIGHTS_DROPLET_CPU = "v1/insights/droplet/cpu"
    V1_INSIGHTS_DROPLET_DISK_READ = "v1/insights/droplet/disk_read"
    V1_INSIGHTS_DROPLET_DISK_WRITE = "v1/insights/droplet/disk_write"
    V1_INSIGHTS_DROPLET_PUBLIC_OUTBOUND_BANDWIDTH = "v1/insights/droplet/public_outbound_bandwidth"
    V1_INSIGHTS_DROPLET_PUBLIC_INBOUND_BANDWIDTH = "v1/insights/droplet/public_inbound_bandwidth"
    V1_INSIGHTS_DROPLET_PRIVATE_OUTBOUND_BANDWIDTH = "v1/insights/droplet/private_outbound_bandwidth"
    V1_INSIGHTS_DROPLET_PRIVATE_INBOUND_BANDWIDTH = "v1/insights/droplet/private_inbound_bandwidth"
    V1_INSIGHTS_LBAAS_AVG_CPU_UTILIZATION_PERCENT = "v1/insights/lbaas/avg_cpu_utilization_percent"
    V1_INSIGHTS_LBAAS_CONNECTION_UTILIZATION_PERCENT = "v1/insights/lbaas/connection_utilization_percent"
    V1_INSIGHTS_LBAAS_DROPLET_HEALTH = "v1/insights/lbaas/droplet_health"

class AlertPolicyRequestWindow(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    FIVE_M = "5m"
    TEN_M = "10m"
    THIRTY_M = "30m"
    ONE_H = "1h"

class AlertPolicyType(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    V1_INSIGHTS_DROPLET_LOAD1 = "v1/insights/droplet/load_1"
    V1_INSIGHTS_DROPLET_LOAD5 = "v1/insights/droplet/load_5"
    V1_INSIGHTS_DROPLET_LOAD15 = "v1/insights/droplet/load_15"
    V1_INSIGHTS_DROPLET_MEMORY_UTILIZATION_PERCENT = "v1/insights/droplet/memory_utilization_percent"
    V1_INSIGHTS_DROPLET_DISK_UTILIZATION_PERCENT = "v1/insights/droplet/disk_utilization_percent"
    V1_INSIGHTS_DROPLET_CPU = "v1/insights/droplet/cpu"
    V1_INSIGHTS_DROPLET_DISK_READ = "v1/insights/droplet/disk_read"
    V1_INSIGHTS_DROPLET_DISK_WRITE = "v1/insights/droplet/disk_write"
    V1_INSIGHTS_DROPLET_PUBLIC_OUTBOUND_BANDWIDTH = "v1/insights/droplet/public_outbound_bandwidth"
    V1_INSIGHTS_DROPLET_PUBLIC_INBOUND_BANDWIDTH = "v1/insights/droplet/public_inbound_bandwidth"
    V1_INSIGHTS_DROPLET_PRIVATE_OUTBOUND_BANDWIDTH = "v1/insights/droplet/private_outbound_bandwidth"
    V1_INSIGHTS_DROPLET_PRIVATE_INBOUND_BANDWIDTH = "v1/insights/droplet/private_inbound_bandwidth"
    V1_INSIGHTS_LBAAS_AVG_CPU_UTILIZATION_PERCENT = "v1/insights/lbaas/avg_cpu_utilization_percent"
    V1_INSIGHTS_LBAAS_CONNECTION_UTILIZATION_PERCENT = "v1/insights/lbaas/connection_utilization_percent"
    V1_INSIGHTS_LBAAS_DROPLET_HEALTH = "v1/insights/lbaas/droplet_health"

class AlertPolicyWindow(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    FIVE_M = "5m"
    TEN_M = "10m"
    THIRTY_M = "30m"
    ONE_H = "1h"

class AppAlertPhase(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNKNOWN = "UNKNOWN"
    PENDING = "PENDING"
    CONFIGURING = "CONFIGURING"
    ACTIVE = "ACTIVE"
    ERROR = "ERROR"

class AppAlertProgressStepStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNKNOWN = "UNKNOWN"
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    ERROR = "ERROR"
    SUCCESS = "SUCCESS"

class AppAlertSpecOperator(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNSPECIFIED_OPERATOR = "UNSPECIFIED_OPERATOR"
    GREATER_THAN = "GREATER_THAN"
    LESS_THAN = "LESS_THAN"

class AppAlertSpecRule(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNSPECIFIED_RULE = "UNSPECIFIED_RULE"
    CPU_UTILIZATION = "CPU_UTILIZATION"
    MEM_UTILIZATION = "MEM_UTILIZATION"
    RESTART_COUNT = "RESTART_COUNT"
    DEPLOYMENT_FAILED = "DEPLOYMENT_FAILED"
    DEPLOYMENT_LIVE = "DEPLOYMENT_LIVE"
    DOMAIN_FAILED = "DOMAIN_FAILED"
    DOMAIN_LIVE = "DOMAIN_LIVE"

class AppAlertSpecWindow(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNSPECIFIED_WINDOW = "UNSPECIFIED_WINDOW"
    FIVE_MINUTES = "FIVE_MINUTES"
    TEN_MINUTES = "TEN_MINUTES"
    THIRTY_MINUTES = "THIRTY_MINUTES"
    ONE_HOUR = "ONE_HOUR"

class AppComponentInstanceBaseInstanceSizeSlug(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The instance size to use for this component. Default: ``basic-xxs``
    """

    BASIC_XXS = "basic-xxs"
    BASIC_XS = "basic-xs"
    BASIC_S = "basic-s"
    BASIC_M = "basic-m"
    PROFESSIONAL_XS = "professional-xs"
    PROFESSIONAL_S = "professional-s"
    PROFESSIONAL_M = "professional-m"
    PROFESSIONAL1_L = "professional-1l"
    PROFESSIONAL_L = "professional-l"
    PROFESSIONAL_XL = "professional-xl"

class AppDatabaseSpecEngine(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* MYSQL: MySQL
    * PG: PostgreSQL
    * REDIS: Redis
    """

    UNSET = "UNSET"
    MYSQL = "MYSQL"
    PG = "PG"
    REDIS = "REDIS"

class AppDomainSpecType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* DEFAULT: The default ``.ondigitalocean.app`` domain assigned to this app
    * PRIMARY: The primary domain for this app that is displayed as the default in the control
    panel, used in bindable environment variables, and any other places that reference an app's
    live URL. Only one domain may be set as primary.
    * ALIAS: A non-primary domain
    """

    UNSPECIFIED = "UNSPECIFIED"
    DEFAULT = "DEFAULT"
    PRIMARY = "PRIMARY"
    ALIAS = "ALIAS"

class AppJobSpecKind(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.
    * PRE_DEPLOY: Indicates a job that runs before an app deployment.
    * POST_DEPLOY: Indicates a job that runs after an app deployment.
    * FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.
    """

    UNSPECIFIED = "UNSPECIFIED"
    PRE_DEPLOY = "PRE_DEPLOY"
    POST_DEPLOY = "POST_DEPLOY"
    FAILED_DEPLOY = "FAILED_DEPLOY"

class AppsDeploymentPhase(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNKNOWN = "UNKNOWN"
    PENDING_BUILD = "PENDING_BUILD"
    BUILDING = "BUILDING"
    PENDING_DEPLOY = "PENDING_DEPLOY"
    DEPLOYING = "DEPLOYING"
    ACTIVE = "ACTIVE"
    SUPERSEDED = "SUPERSEDED"
    ERROR = "ERROR"
    CANCELED = "CANCELED"

class AppsDeploymentProgressStepStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNKNOWN = "UNKNOWN"
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    ERROR = "ERROR"
    SUCCESS = "SUCCESS"

class AppsDomainPhase(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNKNOWN = "UNKNOWN"
    PENDING = "PENDING"
    CONFIGURING = "CONFIGURING"
    ACTIVE = "ACTIVE"
    ERROR = "ERROR"

class AppsImageSourceSpecRegistryType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* DOCKER_HUB: The DockerHub container registry type.
    * DOCR: The DigitalOcean container registry type.
    """

    DOCKER_HUB = "DOCKER_HUB"
    DOCR = "DOCR"

class AppSpecRegion(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The slug form of the geographical origin of the app. Default: ``nearest available``
    """

    AMS = "ams"
    NYC = "nyc"
    FRA = "fra"

class AppVariableDefinitionScope(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* RUN_TIME: Made available only at run-time
    * BUILD_TIME: Made available only at build-time
    * RUN_AND_BUILD_TIME: Made available at both build and run-time
    """

    UNSET = "UNSET"
    RUN_TIME = "RUN_TIME"
    BUILD_TIME = "BUILD_TIME"
    RUN_AND_BUILD_TIME = "RUN_AND_BUILD_TIME"

class AppVariableDefinitionType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* GENERAL: A plain-text environment variable
    * SECRET: A secret encrypted environment variable
    """

    GENERAL = "GENERAL"
    SECRET = "SECRET"

class BillingHistoryType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Type of billing history entry.
    """

    ACH_FAILURE = "ACHFailure"
    ADJUSTMENT = "Adjustment"
    ATTEMPT_FAILED = "AttemptFailed"
    CHARGEBACK = "Chargeback"
    CREDIT = "Credit"
    CREDIT_EXPIRATION = "CreditExpiration"
    INVOICE = "Invoice"
    PAYMENT = "Payment"
    REFUND = "Refund"
    REVERSAL = "Reversal"

class CdnEndpointTtl(int, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one
    of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.
    """

    SIXTY = 60
    SIX_HUNDRED = 600
    THREE_THOUSAND_SIX_HUNDRED = 3600
    EIGHTY_SIX_THOUSAND_FOUR_HUNDRED = 86400
    SIX_HUNDRED_FOUR_THOUSAND_EIGHT_HUNDRED = 604800

class CertificateCreateBaseType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string representing the type of the certificate. The value will be ``custom`` for a
    user-uploaded certificate or ``lets_encrypt`` for one automatically generated with Let's
    Encrypt.
    """

    CUSTOM = "custom"
    LETS_ENCRYPT = "lets_encrypt"

class CertificateState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string representing the current state of the certificate. It may be ``pending``\ ,
    ``verified``\ , or ``error``.
    """

    PENDING = "pending"
    VERIFIED = "verified"
    ERROR = "error"

class CertificateType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string representing the type of the certificate. The value will be ``custom`` for a
    user-uploaded certificate or ``lets_encrypt`` for one automatically generated with Let's
    Encrypt.
    """

    CUSTOM = "custom"
    LETS_ENCRYPT = "lets_encrypt"

class ClusterStatusState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string indicating the current status of the cluster.
    """

    RUNNING = "running"
    PROVISIONING = "provisioning"
    DEGRADED = "degraded"
    ERROR = "error"
    DELETED = "deleted"
    UPGRADING = "upgrading"
    DELETING = "deleting"

class DatabaseClusterEngine(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A slug representing the database engine used for the cluster. The possible values are: "pg" for
    PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.
    """

    PG = "pg"
    MYSQL = "mysql"
    REDIS = "redis"
    MONGODB = "mongodb"

class DatabaseClusterStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string representing the current status of the database cluster.
    """

    CREATING = "creating"
    ONLINE = "online"
    RESIZING = "resizing"
    MIGRATING = "migrating"
    FORKING = "forking"

class DatabaseReplicaStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string representing the current status of the database cluster.
    """

    CREATING = "creating"
    ONLINE = "online"
    RESIZING = "resizing"
    MIGRATING = "migrating"
    FORKING = "forking"

class DatabaseUserRole(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string representing the database user's role. The value will be either
    "primary" or "normal".
    """

    PRIMARY = "primary"
    NORMAL = "normal"

class Distribution(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The name of a custom image's distribution. Currently, the valid values are  "Arch Linux",
    "CentOS", "CoreOS", "Debian", "Fedora", "Fedora Atomic",  "FreeBSD", "Gentoo", "openSUSE",
    "RancherOS", "Ubuntu", and "Unknown".  Any other value will be accepted but ignored, and
    "Unknown" will be used in its place.
    """

    ARCH_LINUX = "Arch Linux"
    CENT_OS = "CentOS"
    CORE_OS = "CoreOS"
    DEBIAN = "Debian"
    FEDORA = "Fedora"
    FEDORA_ATOMIC = "Fedora Atomic"
    FREE_BSD = "FreeBSD"
    GENTOO = "Gentoo"
    OPEN_SUSE = "openSUSE"
    RANCHER_OS = "RancherOS"
    UBUNTU = "Ubuntu"
    UNKNOWN = "Unknown"

class DropletSnapshotType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describes the kind of image. It may be one of ``snapshot`` or ``backup``. This specifies
    whether an image is a user-generated Droplet snapshot or automatically created Droplet backup.
    """

    SNAPSHOT = "snapshot"
    BACKUP = "backup"

class DropletStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A status string indicating the state of the Droplet instance. This may be "new", "active",
    "off", or "archive".
    """

    NEW = "new"
    ACTIVE = "active"
    OFF = "off"
    ARCHIVE = "archive"

class Enum0(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    DROPLET = "droplet"
    KUBERNETES = "kubernetes"

class Enum69(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    PRIVATE = "private"
    PUBLIC = "public"

class Enum70(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    INBOUND = "inbound"
    OUTBOUND = "outbound"

class Enum79(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    DROPLET = "droplet"
    VOLUME = "volume"

class Enum83(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    UNSPECIFIED = "UNSPECIFIED"
    BUILD = "BUILD"
    DEPLOY = "DEPLOY"
    RUN = "RUN"

class Enum84(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    A = "A"
    AAAA = "AAAA"
    CAA = "CAA"
    CNAME = "CNAME"
    MX = "MX"
    NS = "NS"
    SOA = "SOA"
    SRV = "SRV"
    TXT = "TXT"

class Enum85(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    APPLICATION = "application"
    DISTRIBUTION = "distribution"

class FirewallRuleBaseProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of traffic to be allowed. This may be one of ``tcp``\ , ``udp``\ , or ``icmp``.
    """

    TCP = "tcp"
    UDP = "udp"
    ICMP = "icmp"

class FirewallRuleType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of resource that the firewall rule allows to access the database cluster.
    """

    DROPLET = "droplet"
    K8_S = "k8s"
    IP_ADDR = "ip_addr"
    TAG = "tag"
    APP = "app"

class FirewallStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A status string indicating the current state of the firewall. This can be "waiting",
    "succeeded", or "failed".
    """

    WAITING = "waiting"
    SUCCEEDED = "succeeded"
    FAILED = "failed"

class ForwardingRuleEntryProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The protocol used for traffic to the load balancer. The possible values are: ``http``\ ,
    ``https``\ , ``http2``\ , or ``tcp``.
    """

    HTTP = "http"
    HTTPS = "https"
    HTTP2 = "http2"
    TCP = "tcp"

class ForwardingRuleTargetProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The protocol used for traffic from the load balancer to the backend Droplets. The possible
    values are: ``http``\ , ``https``\ , ``http2``\ , or ``tcp``.
    """

    HTTP = "http"
    HTTPS = "https"
    HTTP2 = "http2"
    TCP = "tcp"

class GarbageCollectionStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The current status of this garbage collection.
    """

    REQUESTED = "requested"
    WAITING_FOR_WRITE_JWTS_TO_EXPIRE = "waiting for write JWTs to expire"
    SCANNING_MANIFESTS = "scanning manifests"
    DELETING_UNREFERENCED_BLOBS = "deleting unreferenced blobs"
    CANCELLING = "cancelling"
    FAILED = "failed"
    SUCCEEDED = "succeeded"
    CANCELLED = "cancelled"

class HealthCheckProtocol(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The protocol used for health checks sent to the backend Droplets. The possible values are
    ``http``\ , ``https``\ , or ``tcp``.
    """

    HTTP = "http"
    HTTPS = "https"
    TCP = "tcp"

class ImageActionBaseType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The action to be taken on the image. Can be either ``convert`` or ``transfer``.
    """

    CONVERT = "convert"
    TRANSFER = "transfer"

class ImageStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A status string indicating the state of a custom image. This may be ``NEW``\ ,
     ``available``\ , ``pending``\ , ``deleted``\ , or ``retired``.
    """

    NEW = "NEW"
    AVAILABLE = "available"
    PENDING = "pending"
    DELETED = "deleted"
    RETIRED = "retired"

class ImageType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Describes the kind of image. It may be one of "snapshot", "backup", or "custom". This specifies
    whether an image is a user-generated Droplet snapshot, automatically created Droplet backup, or
    a user-provided virtual machine image.
    """

    BASE = "base"
    SNAPSHOT = "snapshot"
    BACKUP = "backup"
    CUSTOM = "custom"

class InstanceSizeCpuType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """* SHARED: Shared vCPU cores
    
      * DEDICATED: Dedicated vCPU cores
    """

    UNSPECIFIED = "UNSPECIFIED"
    SHARED = "SHARED"
    DEDICATED = "DEDICATED"

class KubernetesNodePoolTaintEffect(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """How the node reacts to pods that it won't tolerate. Available effect values are ``NoSchedule``\
    , ``PreferNoSchedule``\ , and ``NoExecute``.
    """

    NO_SCHEDULE = "NoSchedule"
    PREFER_NO_SCHEDULE = "PreferNoSchedule"
    NO_EXECUTE = "NoExecute"

class LoadBalancerBaseAlgorithm(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """This field has been deprecated. You can no longer specify an algorithm for load balancers.
    """

    ROUND_ROBIN = "round_robin"
    LEAST_CONNECTIONS = "least_connections"

class LoadBalancerBaseSize(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """This field has been replaced by the ``size_unit`` field for all regions except in AMS2, NYC2,
    and SFO1. Each available load balancer size now equates to the load balancer having a set
    number of nodes.
    
    
    * ``lb-small`` = 1 node
    * ``lb-medium`` = 3 nodes
    * ``lb-large`` = 6 nodes
    
    You can resize load balancers after creation up to once per hour. You cannot resize a load
    balancer within the first hour of its creation.
    """

    LB_SMALL = "lb-small"
    LB_MEDIUM = "lb-medium"
    LB_LARGE = "lb-large"

class LoadBalancerBaseStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A status string indicating the current state of the load balancer. This can be ``new``\ ,
    ``active``\ , or ``errored``.
    """

    NEW = "new"
    ACTIVE = "active"
    ERRORED = "errored"

class MaintenancePolicyDay(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The day of the maintenance window policy. May be one of ``monday`` through ``sunday``\ , or
    ``any`` to indicate an arbitrary week day.
    """

    ANY = "any"
    MONDAY = "monday"
    TUESDAY = "tuesday"
    WEDNESDAY = "wednesday"
    THURSDAY = "thursday"
    FRIDAY = "friday"
    SATURDAY = "saturday"
    SUNDAY = "sunday"

class MetricsStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    SUCCESS = "success"
    ERROR = "error"

class MysqlSettingsAuthPlugin(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string specifying the authentication method to be used for connections
    to the MySQL user account. The valid values are ``mysql_native_password``
    or ``caching_sha2_password``. If excluded when creating a new user, the
    default for the version of MySQL in use will be used. As of MySQL 8.0, the
    default is ``caching_sha2_password``.
    """

    MYSQL_NATIVE_PASSWORD = "mysql_native_password"
    CACHING_SHA2_PASSWORD = "caching_sha2_password"

class NetworkV4Type(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the IPv4 network interface.
    """

    PUBLIC = "public"
    PRIVATE = "private"

class NodeStatusState(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """A string indicating the current status of the node.
    """

    PROVISIONING = "provisioning"
    RUNNING = "running"
    DRAINING = "draining"
    DELETING = "deleting"

class PostContentSchemaTierSlug(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The slug of the subscription tier to sign up for.
    """

    STARTER = "starter"
    BASIC = "basic"
    PROFESSIONAL = "professional"

class PostgresDefaultToastCompression(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Specifies the default TOAST compression method for values of compressible columns (the default
    is lz4).
    """

    LZ4 = "lz4"
    PGLZ = "pglz"

class PostgresLogErrorVerbosity(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Controls the amount of detail written in the server log for each message that is logged.
    """

    TERSE = "TERSE"
    DEFAULT = "DEFAULT"
    VERBOSE = "VERBOSE"

class PostgresLogLinePrefix(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Selects one of the available log-formats. These can support popular log analyzers like
    pgbadger, pganalyze, etc.
    """

    PID_P_USER_U_DB_D_APP_A_CLIENT_H = "pid=%p,user=%u,db=%d,app=%a,client=%h"
    _M_P_Q_USER_U_DB_D_APP_A_ = "%m [%p] %q[user=%u,db=%d,app=%a]"
    _T_P_L1_USER_U_DB_D_APP_A_CLIENT_H = "%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h"

class PostgresPgStatStatementsTrack(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Controls which statements are counted. Specify 'top' to track top-level statements (those
    issued directly by clients), 'all' to also track nested statements (such as statements invoked
    within functions), or 'none' to disable statement statistics collection. The default value is
    top.
    """

    ALL = "all"
    TOP = "top"
    NONE = "none"

class PostgresTrackCommitTimestamp(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Record commit time of transactions.
    """

    OFF = "off"
    ON = "on"

class PostgresTrackFunctions(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enables tracking of function call counts and time used.
    """

    ALL = "all"
    PL = "pl"
    NONE = "none"

class PostgresTrackIoTiming(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Enables timing of database I/O calls. This parameter is off by default, because it will
    repeatedly query the operating system for the current time, which may cause significant
    overhead on some platforms.
    """

    OFF = "off"
    ON = "on"

class ProjectBaseEnvironment(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The environment of the project's resources.
    """

    DEVELOPMENT = "Development"
    STAGING = "Staging"
    PRODUCTION = "Production"

class RedisAclChannelsDefault(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option
    is not defined, all_channels is assumed to keep backward compatibility. This option doesn't
    affect Redis configuration acl-pubsub-default.
    """

    ALLCHANNELS = "allchannels"
    RESETCHANNELS = "resetchannels"

class RedisMaxmemoryPolicy(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    NOEVICTION = "noeviction"
    ALLKEYS_LRU = "allkeys-lru"
    VOLATILE_LRU = "volatile-lru"
    ALLKEYS_RANDOM = "allkeys-random"
    VOLATILE_RANDOM = "volatile-random"
    VOLATILE_TTL = "volatile-ttl"
    VOLATILE_LFU = "volatile-lfu"
    ALLKEYS_LFU = "allkeys-lfu"

class RedisPersistence(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB
    dumps are done according to backup schedule for backup purposes. When persistence is 'off', no
    RDB dumps and backups are done, so data can be lost at any moment if service is restarted for
    any reason, or if service is powered off. Also service can't be forked.
    """

    OFF = "off"
    RDB = "rdb"

class RegionSlug(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The slug identifier for the region where the resource will initially be  available.
    """

    AMS1 = "ams1"
    AMS2 = "ams2"
    AMS3 = "ams3"
    BLR1 = "blr1"
    FRA1 = "fra1"
    LON1 = "lon1"
    NYC1 = "nyc1"
    NYC2 = "nyc2"
    NYC3 = "nyc3"
    SFO1 = "sfo1"
    SFO2 = "sfo2"
    SFO3 = "sfo3"
    SGP1 = "sgp1"
    TOR1 = "tor1"

class RegistryCreateRegion(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """Slug of the region where registry data is stored. When not provided, a region will be selected.
    """

    NYC3 = "nyc3"
    SFO3 = "sfo3"
    AMS3 = "ams3"
    SGP1 = "sgp1"
    FRA1 = "fra1"

class RegistryCreateSubscriptionTierSlug(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The slug of the subscription tier to sign up for. Valid values can be retrieved using the
    options endpoint.
    """

    STARTER = "starter"
    BASIC = "basic"
    PROFESSIONAL = "professional"

class ResourceStatus(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The status of assigning and fetching the resources.
    """

    OK = "ok"
    NOT_FOUND = "not_found"
    ASSIGNED = "assigned"
    ALREADY_ASSIGNED = "already_assigned"
    SERVICE_DOWN = "service_down"

class SnapshotResourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of resource that the snapshot originated from.
    """

    DROPLET = "droplet"
    VOLUME = "volume"

class StickySessionsType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """An attribute indicating how and if requests from a client will be persistently served by the
    same backend Droplet. The possible values are ``cookies`` or ``none``.
    """

    COOKIES = "cookies"
    NONE = "none"

class SubscriptionTierExtendedEligibilityReasonsItem(str, Enum, metaclass=CaseInsensitiveEnumMeta):

    OVER_REPOSITORY_LIMIT = "OverRepositoryLimit"
    OVER_STORAGE_LIMIT = "OverStorageLimit"

class TagResourceResourcesItemResourceType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The type of the resource.
    """

    DROPLET = "droplet"
    IMAGE = "image"
    VOLUME = "volume"
    VOLUME_SNAPSHOT = "volume_snapshot"

class UpdateEndpointTtl(int, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one
    of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.
    """

    SIXTY = 60
    SIX_HUNDRED = 600
    THREE_THOUSAND_SIX_HUNDRED = 3600
    EIGHTY_SIX_THOUSAND_FOUR_HUNDRED = 86400
    SIX_HUNDRED_FOUR_THOUSAND_EIGHT_HUNDRED = 604800

class VolumeActionPostBaseType(str, Enum, metaclass=CaseInsensitiveEnumMeta):
    """The volume action to initiate.
    """

    ATTACH = "attach"
    DETACH = "detach"
    RESIZE = "resize"
